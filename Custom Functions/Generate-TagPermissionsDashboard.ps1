<#
.SYNOPSIS
    Generates an HTML dashboard report from the TagPermissions script log file.

.DESCRIPTION
    This script reads the CSV log file produced by the TagPermissions.ps1 script
    and creates a comprehensive HTML dashboard showing operation statistics,
    success/failure rates, and detailed log entries by category.

.PARAMETER LogFilePath
    Path to the CSV log file generated by the TagPermissions.ps1 script.

.PARAMETER OutputPath
    Path where the HTML dashboard report will be saved.
    Defaults to the same directory as the log file with "-Report.html" suffix.

.EXAMPLE
    .\Generate-TagPermissionsDashboard.ps1 -LogFilePath "C:\Logs\TagPermissionsOutput_20230515_123045.csv"

.NOTES
    This dashboard provides a visual representation of the tagging and permission
    operations performed, with filtering capabilities and summary statistics.
#>

param(
    [Parameter(Mandatory=$true)]
    [string]$LogFilePath,
    
    [Parameter(Mandatory=$false)]
    [string]$OutputPath = ""
)

function Get-OperationStats {
    param([array]$LogEntries)
    
    $stats = @{
        TotalOperations = $LogEntries.Count
        SuccessCount = 0
        WarningCount = 0
        ErrorCount = 0
        Categories = @{}
        TagsCreated = 0
        TagsAssigned = 0
        PermissionsAssigned = 0
        VMsProcessed = @()
        OperationTypes = @{}
    }
    
    foreach ($entry in $LogEntries) {
        # Count by severity level
        switch ($entry.Level) {
            "INFO" { $stats.SuccessCount++ }
            "WARN" { $stats.WarningCount++ }
            "ERROR" { $stats.ErrorCount++ }
        }
        
        # Extract operation type
        $message = $entry.Message
        $operationType = "Other"
        
        if ($message -match "Tag(ged|ging)") { 
            $operationType = "VM Tagging"
            $stats.TagsAssigned++
            
            # Extract VM name if present
            if ($message -match "VM '([^']+)'") {
                $vmName = $Matches[1]
                if ($vmName -notin $stats.VMsProcessed) {
                    $stats.VMsProcessed += $vmName
                }
            }
        }
        elseif ($message -match "Created tag ") { 
            $operationType = "Tag Creation"
            $stats.TagsCreated++
        }
        elseif ($message -match "Created tag category") { 
            $operationType = "Category Creation" 
        }
        elseif ($message -match "Assigned role") { 
            $operationType = "Permission Assignment"
            $stats.PermissionsAssigned++
            
            # Extract VM name if present
            if ($message -match "VM '([^']+)'") {
                $vmName = $Matches[1]
                if ($vmName -notin $stats.VMsProcessed) {
                    $stats.VMsProcessed += $vmName
                }
            }
        }
        elseif ($message -match "Created SSO group") { 
            $operationType = "SSO Group Creation" 
        }
        elseif ($message -match "Created new role") { 
            $operationType = "Role Creation" 
        }
        elseif ($message -match "Connect(ing|ed) to") { 
            $operationType = "Connection" 
        }
        
        # Increment operation type counter
        if (-not $stats.OperationTypes.ContainsKey($operationType)) {
            $stats.OperationTypes[$operationType] = 0
        }
        $stats.OperationTypes[$operationType]++
        
        # Categorize entries
        $category = "General"
        if ($message -match "Domain Controller") { $category = "Domain Controllers" }
        elseif ($message -match "OS") { $category = "OS Tagging" }
        elseif ($message -match "permission|role|principal") { $category = "Permissions" }
        elseif ($message -match "tag|category") { $category = "Tags & Categories" }
        elseif ($message -match "SSO group") { $category = "SSO Groups" }
        elseif ($message -match "PSC replication") { $category = "PSC Replication" }
        
        if (-not $stats.Categories.ContainsKey($category)) {
            $stats.Categories[$category] = @{
                Total = 0
                Success = 0
                Warning = 0
                Error = 0
            }
        }
        
        $stats.Categories[$category].Total++
        switch ($entry.Level) {
            "INFO" { $stats.Categories[$category].Success++ }
            "WARN" { $stats.Categories[$category].Warning++ }
            "ERROR" { $stats.Categories[$category].Error++ }
        }
    }
    
    # Calculate unique VMs processed
    $stats.UniqueVMCount = $stats.VMsProcessed.Count
    
    return $stats
}

function Generate-HTMLReport {
    param(
        [array]$LogEntries,
        [hashtable]$Stats
    )
    
    # Prepare timestamp info
    $firstEntry = $LogEntries | Sort-Object Timestamp | Select-Object -First 1
    $lastEntry = $LogEntries | Sort-Object Timestamp | Select-Object -Last 1
    
    $startTime = [datetime]::ParseExact($firstEntry.Timestamp, "yyyy-MM-dd HH:mm:ss", $null)
    $endTime = [datetime]::ParseExact($lastEntry.Timestamp, "yyyy-MM-dd HH:mm:ss", $null)
    $duration = $endTime - $startTime
    $durationText = "{0:D2}h:{1:D2}m:{2:D2}s" -f $duration.Hours, $duration.Minutes, $duration.Seconds
    
    # Calculate success rate
    $successRate = [math]::Round(($Stats.SuccessCount / $Stats.TotalOperations) * 100, 1)
    
    # Create HTML content
    $html = @"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>vCenter Tag & Permissions Status Dashboard</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f7fa;
            color: #333;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #0066cc;
            color: white;
            padding: 20px;
            border-radius: 8px 8px 0 0;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .header h1 {
            margin: 0;
            font-size: 24px;
        }
        .header p {
            margin: 5px 0 0;
            opacity: 0.9;
        }
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            padding: 20px;
            transition: transform 0.2s ease;
        }
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .card h2 {
            margin-top: 0;
            font-size: 18px;
            color: #0066cc;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        .stat {
            font-size: 32px;
            font-weight: bold;
            margin: 15px 0;
            color: #333;
        }
        .stat-label {
            font-size: 14px;
            color: #666;
        }
        .progress-container {
            margin: 20px 0;
            background-color: #f1f1f1;
            border-radius: 4px;
            height: 25px;
            position: relative;
        }
        .progress-bar {
            height: 100%;
            border-radius: 4px;
            background-color: #4CAF50;
            width: 0;
            transition: width 1s ease-in-out;
        }
        .progress-bar.warning {
            background-color: #FFC107;
        }
        .progress-bar.error {
            background-color: #F44336;
        }
        .progress-label {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: black;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(255,255,255,0.7);
        }
        .chart-container {
            height: 250px;
            margin-top: 20px;
        }
        .operation-list {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
        .operation-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
        .operation-name {
            font-weight: 500;
        }
        .operation-count {
            background-color: #e9ecef;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 14px;
        }
        .category-card {
            margin-bottom: 10px;
        }
        .category-title {
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 4px;
        }
        .category-title:hover {
            background-color: #e9ecef;
        }
        .category-name {
            font-weight: bold;
        }
        .category-stats {
            display: flex;
            gap: 10px;
        }
        .category-stat {
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 12px;
        }
        .success-bg {
            background-color: #d4edda;
            color: #155724;
        }
        .warning-bg {
            background-color: #fff3cd;
            color: #856404;
        }
        .error-bg {
            background-color: #f8d7da;
            color: #721c24;
        }
        .log-entries {
            display: none;
            margin-top: 10px;
            max-height: 300px;
            overflow-y: auto;
            background-color: #f8f9fa;
            border-radius: 4px;
            padding: 10px;
        }
        .log-entry {
            padding: 8px;
            margin-bottom: 5px;
            border-radius: 4px;
            font-family: Consolas, monospace;
            font-size: 13px;
            white-space: pre-wrap;
        }
        .info {
            background-color: #e8f4f8;
        }
        .warn {
            background-color: #fff8e1;
        }
        .error {
            background-color: #ffebee;
        }
        .filter-container {
            margin-bottom: 20px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        .filter-btn {
            padding: 8px 15px;
            background-color: #e9ecef;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.2s;
        }
        .filter-btn:hover {
            background-color: #dee2e6;
        }
        .filter-btn.active {
            background-color: #0066cc;
            color: white;
        }
        .timestamp {
            color: #6c757d;
            font-size: 12px;
            margin-right: 10px;
        }
        .footer {
            text-align: center;
            margin-top: 30px;
            padding: 20px;
            color: #6c757d;
            font-size: 14px;
            border-top: 1px solid #dee2e6;
        }
        @media (max-width: 768px) {
            .dashboard-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>vCenter Tag & Permissions Status Dashboard</h1>
            <p>Report generated on $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")</p>
        </div>
        
        <div class="dashboard-grid">
            <div class="card">
                <h2>Operation Summary</h2>
                <div class="stat">$($Stats.TotalOperations)</div>
                <div class="stat-label">Total Operations</div>
                
                <div class="progress-container">
                    <div class="progress-bar" style="width: $successRate%;"></div>
                    <div class="progress-label">$successRate% Success</div>
                </div>
                
                <div style="display: flex; justify-content: space-between; margin-top: 10px;">
                    <div>
                        <div class="stat" style="font-size: 24px; color: #4CAF50;">$($Stats.SuccessCount)</div>
                        <div class="stat-label">Successful</div>
                    </div>
                    <div>
                        <div class="stat" style="font-size: 24px; color: #FFC107;">$($Stats.WarningCount)</div>
                        <div class="stat-label">Warnings</div>
                    </div>
                    <div>
                        <div class="stat" style="font-size: 24px; color: #F44336;">$($Stats.ErrorCount)</div>
                        <div class="stat-label">Errors</div>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <h2>Execution Details</h2>
                <div style="display: flex; justify-content: space-between; margin-bottom: 15px;">
                    <div>
                        <div class="stat-label">Start Time</div>
                        <div style="font-weight: 500;">$($startTime.ToString("yyyy-MM-dd HH:mm:ss"))</div>
                    </div>
                    <div>
                        <div class="stat-label">End Time</div>
                        <div style="font-weight: 500;">$($endTime.ToString("yyyy-MM-dd HH:mm:ss"))</div>
                    </div>
                </div>
                <div class="stat-label">Duration</div>
                <div class="stat" style="font-size: 24px;">$durationText</div>
                
                <div class="stat-label" style="margin-top: 15px;">VMs Processed</div>
                <div class="stat" style="font-size: 24px;">$($Stats.UniqueVMCount)</div>
            </div>
            
            <div class="card">
                <h2>Tag Operations</h2>
                <div style="display: flex; justify-content: space-between;">
                    <div>
                        <div class="stat" style="font-size: 24px;">$($Stats.TagsCreated)</div>
                        <div class="stat-label">Tags Created</div>
                    </div>
                    <div>
                        <div class="stat" style="font-size: 24px;">$($Stats.TagsAssigned)</div>
                        <div class="stat-label">Tags Assigned</div>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <h2>Permission Operations</h2>
                <div class="stat">$($Stats.PermissionsAssigned)</div>
                <div class="stat-label">Permissions Assigned</div>
            </div>
        </div>
        
        <div class="card">
            <h2>Operations by Type</h2>
            <ul class="operation-list">
"@

    # Add operation types
    foreach ($type in $Stats.OperationTypes.Keys | Sort-Object) {
        $html += @"
                <li class="operation-item">
                    <span class="operation-name">$type</span>
                    <span class="operation-count">$($Stats.OperationTypes[$type])</span>
                </li>
"@
    }

    $html += @"
            </ul>
        </div>
        
        <div class="card" style="margin-top: 20px;">
            <h2>Detailed Log</h2>
            
            <div class="filter-container">
                <button class="filter-btn active" data-filter="all">All Entries</button>
                <button class="filter-btn" data-filter="info">Info Only</button>
                <button class="filter-btn" data-filter="warn">Warnings</button>
                <button class="filter-btn" data-filter="error">Errors</button>
"@

    # Add category filter buttons
    foreach ($category in $Stats.Categories.Keys | Sort-Object) {
        $html += @"
                <button class="filter-btn" data-filter="category-$($category.Replace(' ', '-').ToLower())">$category</button>
"@
    }

    $html += @"
            </div>
            
            <div id="log-container">
"@

    # Add category sections
    foreach ($category in $Stats.Categories.Keys | Sort-Object) {
        $categoryStats = $Stats.Categories[$category]
        $categoryId = $category.Replace(' ', '-').ToLower()
        
        $html += @"
                <div class="category-card" data-category="category-$categoryId">
                    <div class="category-title" onclick="toggleCategory('$categoryId')">
                        <span class="category-name">$category</span>
                        <div class="category-stats">
                            <span class="category-stat success-bg">$($categoryStats.Success) Success</span>
                            <span class="category-stat warning-bg">$($categoryStats.Warning) Warning</span>
                            <span class="category-stat error-bg">$($categoryStats.Error) Error</span>
                        </div>
                    </div>
                    <div id="entries-$categoryId" class="log-entries">
"@

        # Add log entries for this category
        $categoryEntries = $LogEntries | ForEach-Object {
            $message = $_.Message
            $isMatch = $false
            
            if ($category -eq "Domain Controllers" -and $message -match "Domain Controller") { $isMatch = $true }
            elseif ($category -eq "OS Tagging" -and $message -match "OS") { $isMatch = $true }
            elseif ($category -eq "Permissions" -and $message -match "permission|role|principal") { $isMatch = $true }
            elseif ($category -eq "Tags & Categories" -and $message -match "tag|category") { $isMatch = $true }
            elseif ($category -eq "SSO Groups" -and $message -match "SSO group") { $isMatch = $true }
            elseif ($category -eq "PSC Replication" -and $message -match "PSC replication") { $isMatch = $true }
            elseif ($category -eq "General" -and -not ($message -match "Domain Controller|OS|permission|role|principal|tag|category|SSO group|PSC replication")) { $isMatch = $true }
            
            if ($isMatch) { $_ }
        }
        
        foreach ($entry in $categoryEntries) {
            $levelClass = $entry.Level.ToLower()
            $html += @"
                        <div class="log-entry $levelClass" data-level="$levelClass">
                            <span class="timestamp">$($entry.Timestamp)</span>$($entry.Message)
                        </div>
"@
        }
        
        $html += @"
                    </div>
                </div>
"@
    }

    $html += @"
            </div>
        </div>
        
        <div class="footer">
            <p>Generated from log file: $LogFilePath</p>
        </div>
    </div>
    
    <script>
        // Initialize progress bars with animation
        document.addEventListener('DOMContentLoaded', function() {
            // Set up filtering
            const filterButtons = document.querySelectorAll('.filter-btn');
            filterButtons.forEach(button => {
                button.addEventListener('click', function() {
                    // Update active button
                    filterButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    
                    const filter = this.getAttribute('data-filter');
                    filterLogEntries(filter);
                });
            });
            
            // Initially show all entries
            filterLogEntries('all');
        });
        
        function filterLogEntries(filter) {
            const categoryCards = document.querySelectorAll('.category-card');
            const logEntries = document.querySelectorAll('.log-entry');
            
            if (filter === 'all') {
                // Show all categories and entries
                categoryCards.forEach(card => card.style.display = 'block');
                logEntries.forEach(entry => entry.style.display = 'block');
            } 
            else if (filter === 'info' || filter === 'warn' || filter === 'error') {
                // Show all categories but filter entries by level
                categoryCards.forEach(card => {
                    card.style.display = 'block';
                    const entries = card.querySelectorAll('.log-entry');
                    let hasVisibleEntries = false;
                    
                    entries.forEach(entry => {
                        if (entry.getAttribute('data-level') === filter) {
                            entry.style.display = 'block';
                            hasVisibleEntries = true;
                        } else {
                            entry.style.display = 'none';
                        }
                    });
                    
                    // Show the log entries container if it has visible entries
                    const entriesContainer = card.querySelector('.log-entries');
                    entriesContainer.style.display = hasVisibleEntries ? 'block' : 'none';
                });
            } 
            else if (filter.startsWith('category-')) {
                // Show only the selected category
                categoryCards.forEach(card => {
                    if (card.getAttribute('data-category') === filter) {
                        card.style.display = 'block';
                        const entriesContainer = card.querySelector('.log-entries');
                        entriesContainer.style.display = 'block';
                        const entries = card.querySelectorAll('.log-entry');
                        entries.forEach(entry => entry.style.display = 'block');
                    } else {
                        card.style.display = 'none';
                    }
                });
            }
        }
        
        function toggleCategory(categoryId) {
            const entriesElement = document.getElementById('entries-' + categoryId);
            if (entriesElement.style.display === 'block') {
                entriesElement.style.display = 'none';
            } else {
                entriesElement.style.display = 'block';
            }
        }
    </script>
</body>
</html>
"@

    return $html
}

# Main script execution
try {
    # Validate log file exists
    if (-not (Test-Path -Path $LogFilePath)) {
        Write-Error "Log file not found at path: $LogFilePath"
        exit 1
    }
    
    # Import log data
    $logData = Import-Csv -Path $LogFilePath -ErrorAction Stop
    
    if ($logData.Count -eq 0) {
        Write-Error "Log file is empty or has invalid format."
        exit 1
    }
    
    # Set default output path if not specified
    if ([string]::IsNullOrWhiteSpace($OutputPath)) {
        $logFileInfo = Get-Item -Path $LogFilePath
        $OutputPath = Join-Path -Path $logFileInfo.DirectoryName -ChildPath ($logFileInfo.BaseName + "-Report.html")
    }
    
    # Generate statistics
    $stats = Get-OperationStats -LogEntries $logData
    
    # Generate HTML report
    $htmlReport = Generate-HTMLReport -LogEntries $logData -Stats $stats
    
    # Save HTML report
    $htmlReport | Out-File -FilePath $OutputPath -Encoding utf8
    
    Write-Host "Dashboard report generated successfully at: $OutputPath"
    
    # Open the report in the default browser
    Start-Process $OutputPath
}
catch {
    Write-Error "Error generating dashboard report: $_"
    exit 1
}
